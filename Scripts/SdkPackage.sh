#!/bin/sh

# remove everything generated by this script
function cleanup
{
    rm -rf Build
	rm -rf Pods/build 	   
}

cd "$SOURCE_ROOT"

# clean 
if [ -n $1 ] && [ "$1" == "clean" ];
then
	cleanup
	echo "Cleaning Completed"
	exit 0
fi

# clean at first
cleanup


#==================== build AWSiOSSDK framework ====================#

xcodebuild -configuration Debug -project "AWSiOSSDKv2.xcodeproj" -target "AWSiOSSDKv2" -sdk iphonesimulator clean build
xcodebuild -configuration Debug -project "Pods/Pods.xcodeproj" -target "Pods" -sdk iphonesimulator clean build

xcodebuild -configuration Debug64 -project "AWSiOSSDKv2.xcodeproj" -target "AWSiOSSDKv2" -sdk iphonesimulator clean build
xcodebuild -configuration Debug64 -project "Pods/Pods.xcodeproj" -target "Pods" -sdk iphonesimulator clean build

xcodebuild -configuration Release -project "AWSiOSSDKv2.xcodeproj" -target "AWSiOSSDKv2" -sdk iphoneos clean build
xcodebuild -configuration Release -project "Pods/Pods.xcodeproj" -target "Pods" -sdk iphoneos clean build

xcodebuild -configuration Release64 -project "AWSiOSSDKv2.xcodeproj" -target "AWSiOSSDKv2" -sdk iphoneos clean build
xcodebuild -configuration Release64 -project "Pods/Pods.xcodeproj" -target "Pods" -sdk iphoneos clean build

#====================================================================#

FRAMEWORK_NAME="${PROJECT}"
FRAMEWORK_VERSION=A

# build path
FRAMEWORK_BUILD_PATH="Build/framework"

echo "Framework: Cleaning framework..."
if [ -d "$FRAMEWORK_BUILD_PATH" ]
then
	rm -rf "$FRAMEWORK_BUILD_PATH/${FRAMEWORK_NAME}.framework"
fi

# This is the full name of the framework 
FRAMEWORK_DIR=$FRAMEWORK_BUILD_PATH/${FRAMEWORK_NAME}.framework

rm -rf $FRAMEWORK_DIR

echo "Framework: Setting up directories..."
mkdir -p $FRAMEWORK_DIR
mkdir -p $FRAMEWORK_DIR/Versions
mkdir -p $FRAMEWORK_DIR/Versions/$FRAMEWORK_VERSION
mkdir -p $FRAMEWORK_DIR/Versions/$FRAMEWORK_VERSION/Resources
mkdir -p $FRAMEWORK_DIR/Versions/$FRAMEWORK_VERSION/Headers

echo "Framework: Creating symlinks..."
ln -s $FRAMEWORK_VERSION $FRAMEWORK_DIR/Versions/Current
ln -s Versions/Current/Headers $FRAMEWORK_DIR/Headers
ln -s Versions/Current/Resources $FRAMEWORK_DIR/Resources
ln -s Versions/Current/$FRAMEWORK_NAME $FRAMEWORK_DIR/$FRAMEWORK_NAME


# The trick for creating a fully usable library is
# to use lipo to glue the different library
# versions together into one file. When an
# application is linked to this library, the
# linker will extract the appropriate platform
# version and use that.
# The library file is given the same name as the
# framework with no .a extension.
echo "Framework: Creating library..."
lipo -create "Build/Debug-iphonesimulator/lib${PROJECT}.a" "Build/Debug64-iphonesimulator/lib${PROJECT}.a" "Build/Release-iphoneos/lib${PROJECT}.a" "Build/Release64-iphoneos/lib${PROJECT}.a" -o "$FRAMEWORK_DIR/Versions/Current/$FRAMEWORK_NAME"

# Now copy headerfile
echo "Framework: Copying assets into current version..."
cp -a AmazonCore/*.h $FRAMEWORK_DIR/Headers/
cp -a AmazonCore/Logging/*.h $FRAMEWORK_DIR/Headers/
cp -a AmazonCore/Networking/*.h $FRAMEWORK_DIR/Headers/
cp -a AmazonCore/Utility/*.h $FRAMEWORK_DIR/Headers/

cp -a AWSCore/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/Authentication/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/CognitoIdentityService/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/EventRecorderService/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/MobileAnalytics/AZCommon/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/MobileAnalytics/include/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/MobileAnalytics/include/monetization/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/Networking/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/Serialization/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/Service/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/STS/*.h $FRAMEWORK_DIR/Headers/
cp -a AWSCore/XMLWriter/*.h $FRAMEWORK_DIR/Headers/

cp -a AutoScaling/*.h $FRAMEWORK_DIR/Headers/
cp -a CloudWatch/*.h $FRAMEWORK_DIR/Headers/
cp -a DynamoDB/*.h $FRAMEWORK_DIR/Headers/
cp -a EC2/*.h $FRAMEWORK_DIR/Headers/
cp -a ElasticLoadBalancing/*.h $FRAMEWORK_DIR/Headers/
cp -a Kinesis/*.h $FRAMEWORK_DIR/Headers/
cp -a S3/*.h $FRAMEWORK_DIR/Headers/
cp -a SES/*.h $FRAMEWORK_DIR/Headers/
cp -a SimpleDB/*.h $FRAMEWORK_DIR/Headers/
cp -a SNS/*.h $FRAMEWORK_DIR/Headers/
cp -a SQS/*.h $FRAMEWORK_DIR/Headers/
